version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: lionpack-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-lionpack_dev}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: --encoding=UTF8 --locale=en_US.UTF-8
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/database/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER:-postgres}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lionpack-network
    restart: unless-stopped

  # Redis Cache & Real-time Collaboration
  redis:
    image: redis:7-alpine
    container_name: lionpack-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_dev_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lionpack-network
    restart: unless-stopped

  # Supabase PostgreSQL (Alternative - optional)
  # Uncomment to use Supabase Docker image instead
  # supabase:
  #   image: supabase/postgres:15
  #   container_name: lionpack-supabase-postgres
  #   environment:
  #     POSTGRES_PASSWORD: ${SUPABASE_DB_PASSWORD:-postgres}
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - supabase_data:/var/lib/postgresql/data
  #   networks:
  #     - lionpack-network
  #   restart: unless-stopped

  # PgAdmin - PostgreSQL Management UI
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: lionpack-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@lionpack.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - lionpack-network
    restart: unless-stopped

  # Redis Commander - Redis Management UI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: lionpack-redis-commander
    environment:
      REDIS_HOSTS: default:redis:${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_dev_password}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - lionpack-network
    restart: unless-stopped

  # API Development Server (Optional - comment out if running locally)
  # api:
  #   build:
  #     context: .
  #     dockerfile: apps/web/Dockerfile.dev
  #   container_name: lionpack-api
  #   environment:
  #     NODE_ENV: development
  #     DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-lionpack_dev}
  #     REDIS_URL: redis://:${REDIS_PASSWORD:-redis_dev_password}@redis:6379
  #     NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
  #     NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
  #   ports:
  #     - "${API_PORT:-3000}:3000"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   networks:
  #     - lionpack-network
  #   restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  lionpack-network:
    driver: bridge

# Usage:
#
# 1. Copy .env.example to .env and update values:
#    cp .env.example .env
#
# 2. Start all services:
#    docker-compose up -d
#
# 3. Stop all services:
#    docker-compose down
#
# 4. View logs:
#    docker-compose logs -f
#
# 5. Access management UIs:
#    - PgAdmin: http://localhost:5050
#    - Redis Commander: http://localhost:8081
#
# 6. Connect to PostgreSQL:
#    psql -h localhost -U postgres -d lionpack_dev
#
# 7. Connect to Redis:
#    redis-cli -h localhost -p 6379
